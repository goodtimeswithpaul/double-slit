Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    30                                           @profile                                                                
    31                                           def compute_finite_difference(U, Uprev, mask, L, R, fac, aX, aY, xlin, â€¦
    32         1          1.0      1.0      0.0      t = 0                                                               
    33         1          0.2      0.2      0.0      outputCount = 1                                                     
    34       243        114.7      0.5      0.1      while t < tEnd:                                                     
    35                                                   # calculate laplacian                                           
    36       242       9669.6     40.0      8.2          ULX = np.roll(U, L, axis=aX)                                    
    37       242       7409.7     30.6      6.3          URX = np.roll(U, R, axis=aX)                                    
    38       242       8493.1     35.1      7.2          ULY = np.roll(U, L, axis=aY)                                    
    39       242       8290.6     34.3      7.1          URY = np.roll(U, R, axis=aY)                                    
    40                                                                                                                   
    41       242      41306.1    170.7     35.1          laplacian = ( ULX + ULY - 4*U + URX + URY )                     
    42                                                                                                                   
    43                                                   # update U                                                      
    44       242      23632.8     97.7     20.1          Unew = 2*U - Uprev + fac * laplacian                            
    45       242       5787.9     23.9      4.9          Uprev = 1.*U                                                    
    46       242       5953.5     24.6      5.1          U = 1.*Unew                                                     
    47                                                                                                                   
    48                                                   # apply boundary conditions (Dirichlet/inflow)                  
    49       242       4339.4     17.9      3.7          U[mask] = 0                                                     
    50       242       2440.7     10.1      2.1          U[0,:] = np.sin(20*np.pi*t) * np.sin(np.pi*xlin)**2             
    51                                                                                                                   
    52                                                   # update time                                                   
    53       242         81.9      0.3      0.1          t += dt  